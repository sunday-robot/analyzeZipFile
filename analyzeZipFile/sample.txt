#include <stdio.h>

void readByte(const char *section, const char *key, FILE *fp, int size) {
    auto *buf = new unsigned char[size];
    fread(buf, 1, size, fp);
    printf("%-20s.%-30s = ", section, key);
    for (int i = 0; i < size; i++) {
        printf("%02x, ", buf[i]);
    }
    printf("\n");
    delete[] buf;
}

short readShort(const char *section, const char *key, FILE *fp) {
    short value;
    fread(&value, 2, 1, fp);
    printf("%-20s.%-30s = %d\n", section, key, value);
    return value;
}

long readLong(const char *section, const char *key, FILE *fp) {
    long value;
    fread(&value, 4, 1, fp);
    printf("%-20s.%-30s = %d\n", section, key, value);
    return value;
}

void analyzeLocalFileHeader(FILE *fp, int fileIndex)
{
    char section[100];
    sprintf_s(section, "local file header %d", fileIndex);
    readByte(section, "local file header signature", fp, 4);
    readByte(section, "version needed to extract", fp, 2);
    readByte(section, "general purpose bit flag", fp, 2);
    readShort(section, "compression method", fp);
    readByte(section, "last mod file time", fp, 2);
    readByte(section, "last mod file date", fp, 2);
    readByte(section, "crc-32", fp, 4);
    readLong(section, "compressed size", fp);
    readLong(section, "uncompressed size", fp);
    readShort(section, "file name length", fp);
    readShort(section, "extra field length", fp);
}

int main(int argc, char *argv[])
{
    FILE *fp;
    fopen_s(&fp, argv[1], "rb");
    int fileIndex = 0;
    analyzeLocalFileHeader(fp, fileIndex);
    fclose(fp);
    return 0;
}
